import React, { Component } from "react";
const OffsetYContext = React.createContext({
  offsetY: undefined,
  listItemHeight: 0,
  columnsPerRow: 1,
  centerYStart: 0,
  centerYEnd: 0,
  listItemLowerBound: 0,
  listItemUpperBound: 0,
  initialOffset: 0,
  contentOffset: 0
});
const IndexContext = React.createContext(0);
export class OffsetYProvider extends Component {
  constructor(props) {
    super(props);

    this._setOffsetY = offsetY => this.setState({
      offsetY
    });

    this._invoke = {
      invoke: this._setOffsetY,
      cancel: () => undefined
    };
    let setOffsetY = this._setOffsetY;

    if (this.props.createInvokeFunction) {
      this._invoke = this.props.createInvokeFunction(setOffsetY);
    }

    this.state = {
      offsetY: undefined,
      setOffsetY: offsetY => this._invoke.invoke(offsetY)
    };
  }

  componentDidUpdate(prevProps) {
    if (this.props.createInvokeFunction !== prevProps.createInvokeFunction && this.props.createInvokeFunction) {
      this._invoke = this.props.createInvokeFunction(this._setOffsetY);
    }
  }

  componentWillUnmount() {
    this._invoke.cancel();
  }

  render() {
    const {
      state: {
        offsetY,
        setOffsetY
      },
      props: {
        children,
        listItemHeight,
        columnsPerRow,
        centerYStart,
        centerYEnd,
        initialOffset = 0,
        listItemLowerBound = listItemHeight / 2,
        listItemUpperBound = listItemHeight / 2,
        contentOffset = 0
      }
    } = this;
    return React.createElement(OffsetYContext.Provider, {
      value: {
        offsetY,
        listItemHeight,
        columnsPerRow,
        centerYStart,
        centerYEnd,
        listItemLowerBound,
        listItemUpperBound,
        initialOffset,
        contentOffset
      }
    }, children({
      setOffsetY
    }));
  }

}
export class IndexProvider extends Component {
  render() {
    const {
      props: {
        children,
        index
      }
    } = this;
    return React.createElement(IndexContext.Provider, {
      value: index
    }, children());
  }

}
export class InCenterConsumer extends Component {
  render() {
    const {
      props: {
        children
      }
    } = this;
    return React.createElement(OffsetYContext.Consumer, null, value => React.createElement(IndexContext.Consumer, null, index => {
      let {
        initialOffset,
        offsetY = initialOffset,
        listItemHeight,
        columnsPerRow = 1,
        centerYStart,
        centerYEnd,
        listItemLowerBound,
        listItemUpperBound,
        contentOffset
      } = value;
      let isInCenter = false;
      const muliplier = Math.floor(index / columnsPerRow);
      const offsetTop = listItemHeight * muliplier + contentOffset;
      const positionRelativeToViewport = offsetTop - offsetY;
      const itemLowerY = positionRelativeToViewport + listItemLowerBound;
      const itemUpperY = positionRelativeToViewport + listItemUpperBound;

      if ((itemLowerY >= centerYStart || itemUpperY >= centerYStart) && (itemLowerY <= centerYEnd || itemUpperY <= centerYEnd)) {
        isInCenter = true;
      }

      return children({
        isInCenter
      });
    }));
  }

}