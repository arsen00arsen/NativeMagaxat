(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (factory((global.ReactInCenter = {}),global.React));
}(this, (function (exports,React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /*:: export type OffsetYContextType = {
    offsetY?: number,
    listItemHeight: number,
    columnsPerRow: number,
    centerYStart: number,
    centerYEnd: number,
    listItemLowerBound: number,
    listItemUpperBound: number,
    initialOffset: number,
    contentOffset: number
  };*/

  var OffsetYContext = React__default.createContext({
    offsetY: undefined,
    listItemHeight: 0,
    columnsPerRow: 1,
    centerYStart: 0,
    centerYEnd: 0,
    listItemLowerBound: 0,
    listItemUpperBound: 0,
    initialOffset: 0,
    contentOffset: 0
  });
  /*:: export type IndexContextType = number;*/

  var IndexContext = React__default.createContext(0);
  /*:: type SetOffsetYFunction = (offsetY: number) => void;*/

  /*:: export type OffsetYProviderFaCCOptions = {
    setOffsetY: (offsetY: number) => void
  };*/

  /*:: export type InvokeResultType = {
    invoke: (offsetY: number) => void,
    cancel: () => void
  };*/

  /*:: export type InvokeFunctionType = (
    invoke: SetOffsetYFunction
  ) => InvokeResultType;*/

  /*:: export type OffsetYProviderProps = {
    children: (opts: OffsetYProviderFaCCOptions) => Node,
    listItemHeight: number,
    columnsPerRow: number,
    centerYStart: number,
    centerYEnd: number,
    createInvokeFunction?: InvokeFunctionType,
    listItemLowerBound?: number,
    listItemUpperBound?: number,
    initialOffset?: number,
    contentOffset?: number
  };*/

  /*:: type OffsetYProviderState = {
    offsetY?: number,
    setOffsetY: SetOffsetYFunction
  };*/

  var OffsetYProvider =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(OffsetYProvider, _Component);

    function OffsetYProvider(props
    /*: any*/
    ) {
      var _this;

      _this = _Component.call(this, props) || this;

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_setOffsetY", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_invoke", void 0);

      _this._setOffsetY = function (offsetY
      /*: number*/
      ) {
        return _this.setState({
          offsetY: offsetY
        });
      };

      _this._invoke = {
        invoke: _this._setOffsetY,
        cancel: function cancel() {
          return undefined;
        }
      };
      var setOffsetY = _this._setOffsetY;

      if (_this.props.createInvokeFunction) {
        _this._invoke = _this.props.createInvokeFunction(setOffsetY);
      }

      _this.state = {
        offsetY: undefined,
        setOffsetY: function setOffsetY(offsetY
        /*: number*/
        ) {
          return _this._invoke.invoke(offsetY);
        }
      };
      return _this;
    }

    var _proto = OffsetYProvider.prototype;

    _proto.componentDidUpdate = function componentDidUpdate(prevProps
    /*: OffsetYProviderProps*/
    ) {
      if (this.props.createInvokeFunction !== prevProps.createInvokeFunction && this.props.createInvokeFunction) {
        this._invoke = this.props.createInvokeFunction(this._setOffsetY);
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this._invoke.cancel();
    };

    _proto.render = function render() {
      var _this$state = this.state,
          offsetY = _this$state.offsetY,
          setOffsetY = _this$state.setOffsetY,
          _this$props = this.props,
          children = _this$props.children,
          listItemHeight = _this$props.listItemHeight,
          columnsPerRow = _this$props.columnsPerRow,
          centerYStart = _this$props.centerYStart,
          centerYEnd = _this$props.centerYEnd,
          _this$props$initialOf = _this$props.initialOffset,
          initialOffset = _this$props$initialOf === void 0 ? 0 : _this$props$initialOf,
          _this$props$listItemL = _this$props.listItemLowerBound,
          listItemLowerBound = _this$props$listItemL === void 0 ? listItemHeight / 2 : _this$props$listItemL,
          _this$props$listItemU = _this$props.listItemUpperBound,
          listItemUpperBound = _this$props$listItemU === void 0 ? listItemHeight / 2 : _this$props$listItemU,
          _this$props$contentOf = _this$props.contentOffset,
          contentOffset = _this$props$contentOf === void 0 ? 0 : _this$props$contentOf;
      return React__default.createElement(OffsetYContext.Provider, {
        value: {
          offsetY: offsetY,
          listItemHeight: listItemHeight,
          columnsPerRow: columnsPerRow,
          centerYStart: centerYStart,
          centerYEnd: centerYEnd,
          listItemLowerBound: listItemLowerBound,
          listItemUpperBound: listItemUpperBound,
          initialOffset: initialOffset,
          contentOffset: contentOffset
        }
      }, children({
        setOffsetY: setOffsetY
      }));
    };

    return OffsetYProvider;
  }(React.Component);
  /*:: export type IndexProviderProps = {
    index: number,
    children: () => Node
  };*/

  var IndexProvider =
  /*#__PURE__*/
  function (_Component2) {
    _inheritsLoose(IndexProvider, _Component2);

    function IndexProvider() {
      return _Component2.apply(this, arguments) || this;
    }

    var _proto2 = IndexProvider.prototype;

    _proto2.render = function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          index = _this$props2.index;
      return React__default.createElement(IndexContext.Provider, {
        value: index
      }, children());
    };

    return IndexProvider;
  }(React.Component);
  /*:: export type ConsumerProps = {
    children: (opts: { isInCenter: boolean }) => Node
  };*/

  var InCenterConsumer =
  /*#__PURE__*/
  function (_Component3) {
    _inheritsLoose(InCenterConsumer, _Component3);

    function InCenterConsumer() {
      return _Component3.apply(this, arguments) || this;
    }

    var _proto3 = InCenterConsumer.prototype;

    _proto3.render = function render() {
      var children = this.props.children;
      return React__default.createElement(OffsetYContext.Consumer, null, function (value) {
        return React__default.createElement(IndexContext.Consumer, null, function (index) {
          var initialOffset = value.initialOffset,
              _value$offsetY = value.offsetY,
              offsetY = _value$offsetY === void 0 ? initialOffset : _value$offsetY,
              listItemHeight = value.listItemHeight,
              _value$columnsPerRow = value.columnsPerRow,
              columnsPerRow = _value$columnsPerRow === void 0 ? 1 : _value$columnsPerRow,
              centerYStart = value.centerYStart,
              centerYEnd = value.centerYEnd,
              listItemLowerBound = value.listItemLowerBound,
              listItemUpperBound = value.listItemUpperBound,
              contentOffset = value.contentOffset;
          var isInCenter = false;
          var muliplier = Math.floor(index / columnsPerRow);
          var offsetTop = listItemHeight * muliplier + contentOffset;
          var positionRelativeToViewport = offsetTop - offsetY;
          var itemLowerY = positionRelativeToViewport + listItemLowerBound;
          var itemUpperY = positionRelativeToViewport + listItemUpperBound;

          if ((itemLowerY >= centerYStart || itemUpperY >= centerYStart) && (itemLowerY <= centerYEnd || itemUpperY <= centerYEnd)) {
            isInCenter = true;
          }

          return children({
            isInCenter: isInCenter
          });
        });
      });
    };

    return InCenterConsumer;
  }(React.Component);

  exports.OffsetYProvider = OffsetYProvider;
  exports.IndexProvider = IndexProvider;
  exports.InCenterConsumer = InCenterConsumer;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
